1.버전관리
메이븐 웹 버전 올리기.txt 참조

2.spring-mvc 패턴 설명 
ㄱ)client, dispatcher servlet, handlermapping, controller, view resolver, view  
ㄴ)spring_mvc.PNG 그림 참조

3.spring-mvc의 가장 간단한 사용 예제 만들기  // chap01

ㄱ) pom.xml에 spring-mvc 추가
ㄴ) web.xml에 dispatcher 추가
ㄷ) dispatcher-servlet.xml(bean 관리)에서 	
   InternalResourceViewResolver를 통한 viewResolver 구현 
ㄹ) 요청을 처리할 class 파일들 설정 
	@controller, @RequestMapping("/요청이름.do")
	
4. get 방식과 post 방식에 따라서 서로 다른 로직을 처리하도록 프로그래밍 해보자. // chap02
@Controller와 @RequestMapping을 class에 걸고

메소드 위에 @RequestMapping(method=RequestMethod.GET)
	   @RequestMapping(method=RequestMethod.POST) 를 건다.


	
5. parameter 값을 받는 방법을 정리해보자 //chap03

ㄱ) httpservletrequest로 받아와서 request.getparameter
ㄴ) @RequestMapping이 걸린 메소드의 매개변수의 변수명과 parameter의 이름을 동일하게
ㄷ) @RequestMapping이 걸린 메소드의 매개변수의 @RequestParam("파라미터이름")을 건다.
ㄹ) @RequestMapping이 걸린 메소드의 매개변수에 커멘트 객체를 주입->클래스 이름의 첫자가 소문자가 모델 이름으로 쓰인다.
ㅁ)  @RequestMapping이 걸린 메소드의 매개변수에 @ModelAttribute("el태그에서 쓸 이름==모델 이름") 속성을 걸어
  	모델 이름을 지정해 줄수도 있다.	
	
6. model에 세팅하는 방법
ㄱ) @RequestMapping 이 걸린 리턴 타입이 ModelAndView, Model, ModelMap , Map , 커멘드 객체 , @ModelAttribute
--> 메소드 안에서 생성해서 값을 세팅한 후 리턴

ㄴ) 	@RequestMapping 메소드 매개변수가 Map, Model, ModelMap
--> 매개변수명을 사용해서 값을 세팅만 하면 자동 리턴


7.View 네임 지정	
ㄱ) 리턴 타입 String
ㄴ) ModelAndView의 setViewName() 메소드
ㄷ) ModelAndView("View 네임") 생성자의 매개변수로 지정	
	
8. Restful서비스란? //chap04
Representational state transfer	

<servlet-mapping>
<servlet-name>dispatcher</servlet-name>
<url-pattern>*.do</url-pattern>
<url-pattern>/game/*</url-pattern>
</servlet-mapping>

dispatcher의 url-pattern 설정 방법은 두 가지가 있다. 
첫 번째는 확장자 기반 , 두 번째는 servlet 경로 기반

두번째 servlet 경로 기반의 경우 
내가 요청한 url을 http://host:port/contextpath/game/* 일 경우 인식은 하지만
uri로 바꿀 때에 contextpath/game 까지 잘라버린다.
따라서 
dispatcher-servlet.xml에 설정을 지정해서
<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="alwaysUseFullPath" value="true" />
	</bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="alwaysUseFullPath" value="true" />		
	</bean>

/game 부터 인식하겠다고 설정해야한다.

그 다음 {템플릿변수} 템플릿변수를 선언해서 @PathVariable 을 통해 변수명을 맞춰주어 받아온다.


9. 유효성을 검사해보자. //chap05

ㄱ) @RequestMapping()이 걸린 메소드의 매개변수에서 커맨드 객체 다음 바로 BindingResult 클래스를 파라미터 값으로 받아온다.
ㄴ) import org.springframework.validation.Validator;
	를 구현한 클래스를 생성하고 
	@RequestMapping()이 걸린 메소드에서 객체를 생성해 받아온 커멘드 객체와 BindingResult 객체를 validate("","") 메소드의 매개변수로 넘겨준다.
ㄷ) 에러를 검사하고 글로벌 에러라면 reject("에러코드","에러코드에 전달할 Object[]" ,"defalut message")
	지역 에러라면 rejectValue("커멘드객체필드명","에러코드")를 호출한다.
	이때 에러코드 프로퍼티는 dispatcher에 지정한다.
	
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>messages.validation</value>
				<!-- 추가할 메세지가 있으면 여기 추가해준다. -->
			</list>
		</property>
	</bean>
	
	validation.properties에서 찾는 순서는
	a) 에러코드.커멘드객체명.필드명
	b) 에러코드.필드명
	c) 에러코드.필드 타입
	d) 에러코드
	
ㄹ) reject,rejectValue가 한번이라도 호출되면 hasErrors() 메소드가 true값을
	리턴하기 때문에 원하는 방향으로 유도할 수 있다.	
 	
ㅁ) 원하는 jsp 페이지에서 
<%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%>
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>

jstl을 걸어주고
글로벌 에러라면
<form:errors element="div">
지역 에러라면
<form:errors path="커멘드객체명.필드명">


10. 어노테이션을 활용한 유효성 검사를 해보자. chap06

validation을 maven repository에서 추가해 준다.
Maven Dependencies에서 vaildation-api를 확인한다.

ㄱ) @RequestMapping()이 걸린 메소드의 매개변수에서 
@Valid 커맨드 객체에 바로 BindingResult 클래스를 파라미터 값으로 받아온다.

ㄴ) @initBinder 를 건 메소드의 파라미터로 webDataBinder 객체를 받아와서
setValidator 메소드를 통해 validator을 구현한 클래스를 등록한다.

ㄷ) validator을 구현한 클래스에서 
@Override
	public boolean supports(Class<?> arg0) {
		
		return MemberDto.class.isAssignableFrom(arg0);
	}
폼 지정하고, 
validate 메소드를 재정의하는데 ValidationUtils 클래스를 쓴다.

ㄹ) 나머지는 위의 ㄷ부터 동일


11. @initBinder의 또다른 기능은? QueryLogController

paratemer의 값은 항상 String인데 이를 자동 타입변환이 가능하도록 해준다.

webDataBinder 객체의 registerCustomEditor메소드를 통해서

타입이 변환되지 않을 경우 에러코드는 typeMismatch.필드명


12. 파일 업로드를 수행해보자 chap07
ㄱ) pom.xml에 
<dependency>
    <groupId>commons-fileupload</groupId>
    <artifactId>commons-fileupload</artifactId>
    <version>1.3.1</version>
</dependency>
등록 후 maven repository에서 commons-fileupload와 commons-io를 확인하자.	
	
ㄴ) dispatcher-servlet.xml에서	
<bean name="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>
등록해준다.	

ㄷ) @RequestMapping이 걸린 메소드의 파라미터 인자로
MultipartFile 인터페이스로 받고 구현 객체로 transforTo 메소드를 사용해 local 컴퓨터에 저장 


13. 업로드 된 파일을 디비에 저장시켜보자.

!!!!주의 ojdbc는 지원을 안해주므로 먼저 WEB-INF/lib파일에 넣어주도록 하자.

ㄱ) pom.xml에 mybatis,mabatis-spring,spring-orm,c3p0 등록
ㄴ)  web.xml에 새로운 xml파일을 만들어서 등록
ㄷ) 새로운 xml에서 dataSource와 sqlSessionFactoryBean 객체를 생성
	sqlSessionFactoryBean 객체 생성 시 mapper의 위치 지정
ㄹ) sqlSessionFactoryBean 객체를 sqlSessionDaoSupport를 상속받은 dao 클래스에 주입
ㅁ) Dto 클래스를 생성
ㅂ) dao 클래스에서 getSqlSession()을 이용해 insert,update,delete,selectList 수행
ㅇ) mapper에서 각 메소드의 sql문을 작성
ㅅ) controller에서 dao 객체를 주입받아서 dao 메소드 수행 

14. 인터셉터를 등록해보자 chap08

ㄱ) dispatcher-servlet.xml에
DefaultAnnotationHandlerMapping의 property="interceptors"에
list값으로 HandlerInterceptorAdapter를 상속받은 클래스의 객체를 등록한다.

ㄴ) HandlerInterceptorAdapter를 구현한 클래스에서 3가지 메소드

boolean preHandle(HttpServletRequest request,HttpServletResponse response, Object Hander)
void postHandle()
void afterHandle()

메소드를 재정의하는데 preHandle의 경우 return 값이 false일 경우 원래 요청을 수행하지 않는다.
true 일 경우 원래 요청 수행


15. 예외처리를 해보자   //spring_mvc 프로젝트의 dispatcher-servlet을 살펴보자.

SimpleMappingExceptionResolver를 bean 등록 후
property = "exceptionMappings" 에 <props>
<prop key="패키지명.예외타입클래스">지정할 viewName</prop>


16. @RequestBody 와  @ResponseBody를 설명해보자. //chap10

매개 변수에 @RequestBody를 걸면 요청한 body의 값,value 을 String이나 byte[]로 받을 수 있다.

받은 @RequestBody의 매개변수를 return 할 때 메소드 위에 @ResponseBody로 적어주면
전달받은 내용을 되돌려 줄 수 있다.



17.json 사용하기  //chap11
JSONObject jso = new JSONObject();

jso.put("키","값")

Printwriter out = response.getWriter()

out.print(jso.toString())

또는 메소드에 @ResponseBody를 걸고 return jso.toString()

18. <spring:message> 사용하기 //chap09
pom.xml에서 jstl jar 파일 설정 

jsp 페이지에서
<%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%>

dispatcher-servlet에서 ResourceBundleMessageSource 설정하기 	

19. <form:form> 태그 사용 //chap09
pom.xml에서 jstl jar 파일 설정 

jsp 페이지에서
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>

<form:form commandName="model에서 받아올 커멘드객체이름">

20.<form:input path="이름">
21.<form:select path="이름" items="${리스트}">
22.<form:select path="이름">
	<option value="">label</option>
	<form:options items="${리스트}">	
	</form:select>
23.<form:checkboxs path="이름" items="${}">
24.<form:checkbox  path="이름" label="약관동의"> boolean타입으로 지정된다.



25.tiles 사용 예제

26. locale 사용


