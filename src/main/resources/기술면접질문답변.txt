1.자바입니다.

class Plus{

public static void main(String arg[]){

int result=0;

for(int i=1;i<=100;i++){
	
	result+=i;
}

System.out.print(result);

}

}


[java]

1. 메모리 해제 작업.

객체가 생성 된 이후의 코드에서 객체를 사용하지 않으면 자동적으로 작동합니다.
사용자가 원하는 경우 finalize() 메소드를 통해

2.

byte 1
short 2
int 4
long 8
float 8
double 16 

char 2 byte
boolean 1byte

3.
참조형 데이터 타입 : java.lang.object를 상속받으며 객체의 주소값을 저장하고 있다.

예로는 String

4.oop : object oriented programming
객체 지향적 언어로서 연관된 데이터와 메소드들의 묶음형태로 존재한다.

특징으로는 상속, 캡슐화, 다형성 등이 있다.


5.
접근 지시자를 통해서 외부에서 접근하지 못하도록 맞으므로 인해서
데이터의 보호 효과를 가져오고 클라이언트에게 접근해야 할 
부분을 지정할 수 있게 된다.


6.
다형성 : 
조상의 래퍼런스변수가 자손의 인스턴스를 참조하는 것

동적 바인딩이란? 
코드 실행 흐름에 따라서 조상의 래퍼런스 변수가 어떤 자손의 인스턴스를 참조하게 되는지 결정되는 것


7.
상속이란

final로 정의되지 않은 것과 생성자를 제외한 조상의 클래스를 자식 클래스가 물려받거나 공유하는 것.


8. 
상속의 장단점

장점 : 코드의 재활용성을 높인다.

단점 : 코드의 유지,보수가 복잡해진다. 불필요한 부분까지 상속받게 될 수도 있다.

9.

클래스란?
형태만 존재하는 상태

instance란?
new 연산자를 통해 실질적으로 메모리에 올라간 상태

10.

process? 운영체제에서 실행되는 프로그램의 수

thread? process에서 돌아가는 흐름


Class Thread 
interface Runnable

Thread 구현

1. Thread를 상속받아 run 메소드 재정의 후 start 메소드 실행

2. Runnable를 구현해서 run 메소드 재정의 후 Thread 생성자의 인자로 넣어주거나

Runnable를 구현할 때 람다식을 통해 run 메소드를 재 정의해 바로 사용할 수 있다.

3. executorService를 통한 쓰레드풀 생성을 통해 Thread를 구현 할 수도 있다.

11.

static

모든 객체가 공유하게 된다.

static 변수는 메모리에 할당될 때에도 클래스 영역에 할당되어 관리된다.

12.

오버 로딩
같은 클래스 영역에서 메소드의 이름이 같지만

매개변수 데이터 타입, 매개변수의 갯수 등이 다른 경우


오버 라이딩

조상의 메소드의 이름과 자손의 메소드 이름이 같은 경우

자손의 객체를 생성해 메소드를 호출하면 자손의 메소드가 호출되는 것.(재정의)


13.

추상 클래스

추상 메소드가 하나 이상 존재하는 클래스


인터페이스

상수와 추상 메소드들만이 존재 가능

둘다 객체를 만들 수는 없다.

14.

제네릭?


다룰 객체를 미리 지정하는 것 , 참조형 데이터만 지정할 수 있으므로 기본형은 wrapper class를 사용한다.


15.

배열 생성 시 공간을 지정하기 때문에 배열 공간 이상의 데이터가 들어오면

ArrayIndexoutofbound 에러발생

ArrayList의 경우 공간이 가변적으로 늘어난다.



16.

스택
LIFO :last in first out 나중에 들어간 것이 처음에 나온다.



LinkedList 
앞 뒤의 index끼리 연관되어 있어서 데이터의 추가,삭제가 
List보다 빠르다.
클래스이기 때문에 객체 생성이 가능.


List
들어온 값들을 index를 통해 관리한다.
인터페이스이기 때문에 List를 상속받은 클래스를 이용해 객체 생성

17.

List : 들어온 값들을 index를 통해 관리, 값의 중복이 허용

Set : 집합처럼 관리된다. 값의 중복이 허용되지 않는다.

Map : key, value를 통해 관리, key값은 중복을 허용하지 않는다. 


18.
private : 같은 클래스 내에서만 접근 가능
default : 같은 패키지 내에서만 접근 가능
protected : 상속받은 경우 접근 가능
public : 어디서든 접근 가능

19.

hasCode() : 객체의 주소값를 정수값으로 반환

하나 이상의 객체를 사용할 수 없다.

20.

Hashtable : 동기화 되어 있다.
HashMap  : 동기화 되어 있지 않다.

21.

자바의 i/o 시스템은 바이트 단위로 넘어가기 때문에

복잡한 객체를 넘어갈 수 있도록 바이트 단위로 만들어주는 행위

Serializable를 상속받아서

ObjectInputStream, ObjectOutputStream을 재정의 한다.


22.

자판기


-----------------------------------------------------------
[WEB]

1.MVC

M : 비지니스에 필요한 데이터

V: view

C: controller

view에서 요청이 들어오면 controller가 model에서 요청을 처리해서

다시 view쪽으로 보내준다.



2.

model1 

VC가 합쳐진 모델로서 view와 controller가 같은 곳에서 존재해서

코드의 유지,보수가 힘들다.


model2

V와 C가 분리되어 

코드의 유지,보수가 간편해졌다.


3.JSTL

jsp standard tag library

jsp에서 주로 사용하는 로직들을 스크립틀릿을 쓰지 않고도 간편하게 사용할 수 있도록

만들어준 라이브러리로

core,fmt가 주로 쓰인다.


4.

값을 꺼낼 때
<% session.getAtrribute("");%>

값을 넣을 때

<%session.setAttribute("",""); %>


5.

jsp 파일 내에서 깨지는 경우

<@page contentType="text/html;charSet=UTF-8">


jsp에서 요청받은 내용이 깨지는 경우


GET 방식인 경우

server.xml에서 <Connector>태그에서 속성 URIEncoding="UTF-8" 설정

POST 방식인 경우

요청하는 쪽에서

request.setCharacterEncoding("UTF-8");


6.

JSP

html파일에서 자바코드를 삽입 할 수 있도록 만든 페이지

Servlet으로 처리된 내용을 클라이언트에게 보이기 편하게 만들기 위해
만들어졌다.


7.
Servlet


웹에서 request,response를 처리하는 자바 파일
HttpServlet을 상속받는다.

8.
ajax

asynchronized javascript and xml

비동기적 자바스크립트와 xml


어떤 로직을 수행하는데 서버에서 모두 처리되어 다시 클라이언트에게 보내던 방식에서 벗어나서

요청한 내용을 브라우저의 javascript가 처리하도록 만든 방식

덕분에 서버의 부하도 줄고 

웹 페이지 전체가 reload되지 않아도 부분적으로 변화 내용을 서버에서 가져올 수 있다.

9.


RESTful???




10.

세션 :

요청을 한 경우 서버에서 자동 생성해 서버에 저장한다.
브라우저 당 하나의 세션이 생성된다.

jsp에서 쓸 경우
<% session%> ${sessionScope}

Servlet에서 쓸 경우

HttpSession session = request.getSession();


쿠키 :

서버에서 생성해 클라이언트에게 보내주고, 클라이언트에 저장된다.

Cookie cookie = new Cookie("",""); 생성

response.addCookie(cookie); // 요청한 클라이언트에게 다시 보내준다.


Cookie[] cookies = request.getCookies(); //로 받는다.


11.

GET방식

URI의 ?뒤에 변수=값 형태로 전송

보안에 취약하지만 POST 형식보다 빠르다.


POST방식

데이터들이 감싸져서 보내진다.

보안에 좋다.



12.

jquery를 사용 후 느낀점

프로그래밍 언어를 모르는 사람도 직관적으로 사용하기 편하도록 만들어져 있다.

단 그로 인해 발생하는 오류를 디버깅하기는 굉장히 힘들었다.

---------------------------------------------------------------
[Spring FrameWork]

1. maven 형태의 프로젝트를 통해

라이브러리 관리가 편하다.

2. DI

dependency injection

내가 필요로 하는 객체를 new를 통해 생성하는 것이 아닌

외부에서 생성 후 주입해 준다.

3.

??

4.

??

5.

??
------------------------------------------------

[Oracle DB]
1.데이터베이스란~?

데이터들의 모음으로 다음과 같은 특징을 만족해야한다.

통합: 데이터의 중복을 최소화해야한다.

저장: 물리적인 공간에 저장되어 있어야한다.

운용: 비스니스에 필요한 내용이어야한다.

공용: 공유할 수 있어야 한다.

데이터 베이스의 장점?

데이터의 중복을 최소화해준다.
데이터의 종속성을 없애준다.

종속성? 데이터를 사용하는 프로그램에 의존적


데이터 베이스의 단점?
관리하는데 돈이 많이 든다. 시스템을 유지하는데 복잡하다.


3.

DDL : database definition language

create table tbl_member(
id varchar2(20)
,pw varchar2(100)
)

DML : database manipulate language

insert into tbl_member values('tk','1234');

DCL : database control language

grant~~


4. 

트랜잭션

일의 처리 단위


5. 

기본키

후보키 중 하나
 
후보키 ? 유일성 + 최소성

, 튜플을 식별할 수 있는 속성 



외래키

다른 테이블의 기본키를 참조하는 키 , 관계형 데이터모델에서 사용


6.

where 조건절

from 에서 조건을 만족하는 것을 탐색한다.

having 그룹함수 조건절

Group by로 묶인 그룹에서 조건을 만족하는 것을 검색한다.
 
7.

Group by?

그룹으로 묶는 절????

8. 


inner join은 null값을 처리하지 않고 outer join은 null값을 처리한다.


9.

제약조건?

Unique key

Primary key

Foreign

check

not null


[project]
1.
2.
3.
4.


[etc]
1.

2.
빅데이터

3.





































