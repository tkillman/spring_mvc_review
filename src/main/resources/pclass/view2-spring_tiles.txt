[index.jsp]
	
<a href="tiles/login/login.do">/tiles/login/login.do</a><br>


[LoginCommand.java]

package spring.tiles.controller;

public class LoginCommand {

	private String id;
	private String password;
	private String loginType;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getLoginType() {
		return loginType;
	}

	public void setLoginType(String loginType) {
		this.loginType = loginType;
	}

}


[Authenticator.java]
package spring.tiles.controller;

public interface Authenticator {

	void authenticate(String id, String password);

}

[AuthenticationException.java]

package spring.tiles.controller;

public class AuthenticationException extends RuntimeException {

	private static final long serialVersionUID = 1L;

	public AuthenticationException(String message) {
		super(message);
	}

}



[MockAuthenticator.java]

package spring.tiles.controller;

public class MockAuthenticator implements Authenticator {
//로그인 시 abc라는 아이디로 로그인 해야 성공
	public void authenticate(String id, String password) {
		if (!id.equals("abc")) {
			throw new AuthenticationException("invalid id "+id);
		}
	}

}



[LoginCommandValidator.java]

package spring.tiles.controller;

import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

public class LoginCommandValidator implements Validator {

	public void validate(Object target, Errors errors) {
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "id", "required");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password",
				"required");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "loginType",
				"required");
	}

	public boolean supports(Class<?> clazz) {
		return LoginCommand.class.isAssignableFrom(clazz);
	}

}




[LoginController.java]

package spring.tiles.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
@RequestMapping("/login/login.do")
public class LoginController {

	private Authenticator authenticator;

	@ModelAttribute("login")
	public LoginCommand formBacking() {
		return new LoginCommand();
	}

	@RequestMapping(method = RequestMethod.GET)
	public String form() {
		return "loginForm";
	}

	@RequestMapping(method = RequestMethod.POST)
	public String submit(@ModelAttribute("login") LoginCommand loginCommand,
			BindingResult result) {
		new LoginCommandValidator().validate(loginCommand, result);
		if (result.hasErrors()) {
			return "loginForm";
		}
		try {
			authenticator.authenticate(loginCommand.getId(), loginCommand
					.getPassword());
			return "loginSuccess";
		} catch (AuthenticationException ex) {
			result.reject("invalidIdOrPassword", new Object[] { loginCommand
					.getId() }, null);
			return "loginForm";
		}
	}

	@ModelAttribute("loginTypes")
	protected List<String> referenceData() throws Exception {
		List<String> loginTypes = new ArrayList<String>();
		loginTypes.add("일반회원");
		loginTypes.add("기업회원");
		loginTypes.add("헤드헌터회원");
		return loginTypes;
	}

	public void setAuthenticator(Authenticator authenticator) {
		this.authenticator = authenticator;
	}

}







[web.xml]

<servlet>
		<servlet-name>dispatcherTiles</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	</servlet>

<servlet-mapping>
		<servlet-name>dispatcherTiles</servlet-name>
		<url-pattern>/tiles/*</url-pattern>
	</servlet-mapping>


[/WEB-INF/tiles_def/tilesdef.xml]
<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE tiles-definitions PUBLIC
  "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN" 
  "http://tiles.apache.org/dtds/tiles-config_3_0.dtd">

<tiles-definitions>

<definition name="base_layout" template="/WEB-INF/viewtiles/template/layout.jsp"
preparer="menuPreparer">
<put-attribute name="header"
			value="/WEB-INF/viewtiles/template/header.jsp" />
		<put-attribute name="footer"
			value="/WEB-INF/viewtiles/template/footer.jsp" />
	</definition>

	<definition name="loginForm" extends="base_layout">
		<put-attribute name="title" value="로그인폼" />
		<put-attribute name="body"
			value="/WEB-INF/viewtiles/loginForm.jsp" />
	</definition>

	<definition name="loginSuccess" extends="base_layout">
		<put-attribute name="title" value="로그인 성공" />
		<put-attribute name="body"
			value="/WEB-INF/viewtiles/loginSuccess.jsp" />
	</definition>

</tiles-definitions>


[/WEB-INF/dispatcherTiles-servlet.xml]
	<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<bean class="tiles.controller.LoginController">
		<property name="authenticator">
			<bean class="tiles.controller.MockAuthenticator" />
		</property>
	</bean>

	<bean class="tiles.controller.RegistMemberController" />

	<bean id="tilesviewResolver"
		class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" />
	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tilesdef/tilesdef.xml</value>
			</list>
		</property>
		<property name="preparerFactoryClass" value="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory"/>
	</bean>
	
	<bean id="menuPreparer" class="spring.tiles.MenuPreparer" /> 

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message.validation</value>
				<value>message.label</value>
			</list>
		</property>
	</bean>


</beans>



[/WEB-INF/viewtiles/template/layout.jsp]
	<%@ page contentType="text/html; charset=UTF-8"%>
	<%@ taglib uri="http://tiles.apache.org/tags-tiles" prefix="tiles"%>
	<html>
	<head>
	<title><tiles:getAsString name="title" /></title>
	</head>
	<body>
	<tiles:insertAttribute name="header" />
	<hr />
	<tiles:insertAttribute name="body" />
	<hr/>
	<tiles:insertAttribute name="footer" />
	</body>
	</html>

[/WEB-INF/viewtiles/template/header.jsp]
	<%@ page contentType="text/html; charset=UTF-8"%>
	<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
	<%@ page isELIgnored="false" %>
	<tiles:importAttribute name="menuList"/>
	<c:forEach var="menu" items="${menuList}">${menu} </c:forEach> 
	| 환영합니다!

[/WEB-INF/viewtiles/template/footer.jsp]
	<%@ page contentType="text/html; charset=UTF-8"%>
	스프링 예제.

[/WEB-INF/viewtiles2/loginForm.jsp]
	<%@ page contentType="text/html; charset=UTF-8" %>
	<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
	<form:form commandName="login">
	<form:errors />
	<p>
		<label for="loginType"><spring:message code="login.form.type" /></label>
		<form:select path="loginType" items="${loginTypes}" />
	</p>
	<p>
		<label for="id"><spring:message code="login.form.id" /></label>
		<form:input id="id" path="id"/>
		<form:errors path="id" />
	</p>
	<p>
		<label for="password"><spring:message code="login.form.password" /></label>
		<form:password id="password" path="password"/>
		<form:errors path="password" />
	</p>
	<p>
		<input type="submit" value="<spring:message code="login.form.submit" />">
	</p>
	</form:form>

[/WEB-INF/viewtiles2/loginSuccess.jsp]
	<%@ page language="java" contentType="text/html; charset=UTF-8" %>
	로그인에 성공했습니다.	


=================================================================================================================

[index.jsp]
	<a href="tiles/member/regist.do">/member/regist.do</a>


[Code.java]

package spring.tiles.controller;

public class Code {

	private String code;
	private String label;
	
	public Code() {
	}    
	
	public Code(String code, String value) {
		this.code = code;
		this.label = value;
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	public String getLabel() {
		return label;
	}

	public void setLabel(String value) {
		this.label = value;
	}

}


[Address.java]

package spring.tiles.controller;

public class Address {

	private String address1;
	private String address2;

	public String getAddress1() {
		return address1;
	}

	public void setAddress1(String address1) {
		this.address1 = address1;
	}

	public String getAddress2() {
		return address2;
	}

	public void setAddress2(String address2) {
		this.address2 = address2;
	}

}


[MemberInfo.java]

package spring.tiles.controller;

public class MemberInfo {

	private String userId;
	private String name;
	private Address address;
	private String[] favorites;
	private String jobCode;
	private String tool;
	private String etc;
	private boolean contractAgreement;

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	public String[] getFavorites() {
		return favorites;
	}

	public void setFavorites(String[] favorates) {
		this.favorites = favorates;
	}

	public String getJobCode() {
		return jobCode;
	}

	public void setJobCode(String jobCode) {
		this.jobCode = jobCode;
	}

	public String getTool() {
		return tool;
	}

	public void setTool(String tool) {
		this.tool = tool;
	}

	public String getEtc() {
		return etc;
	}

	public void setEtc(String etc) {
		this.etc = etc;
	}

	public boolean isContractAgreement() {
		return contractAgreement;
	}

	public void setContractAgreement(boolean contractAgreement) {
		this.contractAgreement = contractAgreement;
	}

}


[MemberInfoValidator.java]

package spring.tiles.controller;

import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

public class MemberInfoValidator implements Validator {

	public void validate(Object target, Errors errors) {
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "userId", "required");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name", "required");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "address.address1",
				"required");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "address.address2",
				"required");
		ValidationUtils
				.rejectIfEmptyOrWhitespace(errors, "jobCode", "required");
		MemberInfo memberInfo = (MemberInfo) target;
		if (memberInfo.getFavorites() == null
				|| memberInfo.getFavorites().length == 0) {
			errors.rejectValue("favorites", "must_select");
		}
	}

	public boolean supports(Class<?> clazz) {
		return MemberInfo.class.isAssignableFrom(clazz);
	}

}

[RegistMemberController.java]

package spring.tiles.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
@RequestMapping("/member/regist.do")
public class RegistMemberController {

	private String formViewName = "registMemberForm";

	@RequestMapping(method = RequestMethod.GET)
	public String form(Model model) {
		referenceData(model);
		return formViewName;
	}

	private void referenceData(Model model) {
		List<Code> jobCodes = new ArrayList<Code>();
		jobCodes.add(new Code("1", "개발자"));
		jobCodes.add(new Code("2", "UI 개발자"));
		jobCodes.add(new Code("3", "웹 디자이너"));
		jobCodes.add(new Code("3", "기획자"));

		String[] favoritesOsNames = { "윈도우XP", "비스타", "윈도우7", "우분투", "맥" };
		String[] tools = { "Eclipse", "IntelliJ", "NetBeans" };

		model.addAttribute("jobCodes", jobCodes);
		model.addAttribute("favoritesOsNames", favoritesOsNames);
		model.addAttribute("tools", tools);
	}

	@ModelAttribute
	protected Object formBackingObject() throws Exception {
		return new MemberInfo();
		// MemberInfo member = new MemberInfo();
		// member.setAddress(new Address());
		// return member;
	}

	@RequestMapping(method = RequestMethod.POST)
	public String submit(@ModelAttribute MemberInfo memberInfo,
			BindingResult result, Model model) {
		new MemberInfoValidator().validate(memberInfo, result);
		checkDuplicateId(memberInfo.getUserId(), result);
		if (result.hasErrors()) {
			referenceData(model);
			return formViewName;
		}
		return "registMember";
	}

	private void checkDuplicateId(String userId, BindingResult errors) {
		if (userId.equals("abc")) {
			errors.rejectValue("userId", "duplicate");
		}
	}

}



[/WEB-INF/tiles_def/tilesdef.xml]
	...
	<definition name="registMemberForm" extends="base_layout">
		<put-attribute name="title" value="회원 가입" />
		<put-attribute name="body"
			value="/WEB-INF/viewtiles/registMemberForm.jsp" />
	</definition>

	<definition name="registMember" extends="base_layout">
		<put-attribute name="title" value="회원 가입 완료" />
		<put-attribute name="body"
			value="/WEB-INF/viewtiles/registMember.jsp" />
	</definition>
	...
	
[/WEB-INF/dispatcherTiles-servlet.xml]
	...
	<bean class="spring.tiles.controller.RegistMemberController" />
	...
	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles_def/tilesdef.xml</value>
			</list>
		</property>
		<property name="preparerFactoryClass"
			value="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory" />

	</bean>

	<bean id="menuPreparer" class="spring.tiles.MenuPreparer" />
	...



[MenuPreparer.java]
	package spring.tiles;

	import java.util.ArrayList;
	import java.util.List;

	import org.apache.tiles.Attribute;
	import org.apache.tiles.AttributeContext;
	import org.apache.tiles.preparer.ViewPreparer;
	import org.apache.tiles.request.Request;

	public class MenuPreparer implements ViewPreparer {

	public void execute(Request tilesContext,
			AttributeContext attributeContext) {
		List<String> menuList = new ArrayList<String>();
		menuList.add("홈");
		menuList.add("로그인");
		menuList.add("회원가입");
		attributeContext.putAttribute("menuList", new Attribute(menuList), true);
		}	
	}



[/WEB-INF/viewtiles2/registMemberForm.jsp]
	<%@ page contentType="text/html; charset=UTF-8" %>
	<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
	<form:form commandName="memberInfo">
	<p>
		<form:label path="userId">회원 ID</form:label>
		<form:input path="userId" />
		<form:errors path="userId" />
	</p>
	<p>
		<form:label path="name">이름</form:label>
		<form:input path="name" />
		<form:errors path="name" />
	</p>
	<p>
		<form:label path="address.address1">주소1</form:label>
		<form:input path="address.address1" />
		<form:errors path="address.address1" />
	</p>
	<p>
		<form:label path="address.address2">주소2</form:label>
		<form:input path="address.address2" />
		<form:errors path="address.address2" />
	</p>
	<p>
		<form:label path="jobCode">직업</form:label>
		<form:select path="jobCode" >
			<option value="">--- 선택하세요 ---</option>
			<form:options items="${jobCodes}" itemLabel="label" itemValue="code" />
		</form:select>
		<form:errors path="jobCode" />
	</p>
	<p>
		<form:label path="favorites">선호 OS</form:label>
		<form:checkboxes items="${favoritesOsNames}" path="favorites" />
		<form:errors path="favorites" />
	</p>
	<p>
		<form:label path="tool">주로 사용하는 개발툴</form:label>
		<form:radiobuttons items="${tools}" path="tool" />
	</p>
	<p>
		<form:label path="etc">기타</form:label>
		<form:textarea path="etc" cols="20" rows="3"/>
	</p>
	<p>
		<form:checkbox path="contractAgreement" label="약관에 동의합니다."/>
	</p>
	<p>
		<input type="submit" value="회원 등록">
	</p>
	</form:form>


[/WEB-INF/viewtiles2/registMember.jsp]
	<%@ page contentType="text/html; charset=UTF-8" %>
	회원 등록: ${memberInfo.name}, ${memberInfo.address.address1}, ${memberInfo.address.address2}