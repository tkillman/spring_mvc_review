
[build.gradle]
compile group: 'net.sf.json-lib', name: 'json-lib-ext-spring', version: '1.0.2'



[sql/cityMapper.xml]

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="city">
	<select id="listSido" resultType="String">
		select distinct area1 from zipcode order by area1 asc
	</select>

	<select id="listCity" parameterType="String" resultType="String">
		select distinct area2 from zipcode 
		where area1 = #{area1} order by area2 asc
	</select>

</mapper>



[CityService.java]

package Ajax.Contorller;

import java.util.List;

public interface CityService {
	public List<String> listSido();
	public List<String> listCity(String city);
}


[CityServiceImpl.java]
package Ajax.Contorller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

public class CityServiceImpl implements CityService {
	@Autowired
	private CommonDAO dao;

	public void setDao(CommonDAO dao) {
		this.dao = dao;
	}

	public List<String> listSido() {
		List<String> list = null;

		try {
			list = dao.getListData("city.listSido");
		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return list;
	}
 
	public List<String> listCity(String city) {
		List<String> list = null;

		try {
			list = dao.getListData("city.listCity", city);
		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return list;
	}

}



[CityDAO.java]
package Ajax.Contorller;

import java.util.List;

import org.mybatis.spring.support.SqlSessionDaoSupport;

public class CityDAO extends SqlSessionDaoSupport{

	public List<String> getListData(String string) {
		List<String> sido = getSqlSession().selectList(string);
		return sido;
	}

	public List<String> getListData(String string, String city) {
		List<String> selectcity = getSqlSession().selectList(string, city);
		return selectcity;
	}

}




[CityController.java]

package Ajax.Contorller;

import java.io.PrintWriter;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject; 

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class CityController {
	@Autowired
	private CityService service;
	
	public void setService(CityService service) {
		this.service = service;
	}

	@RequestMapping(value = "/city/city.do")
	public String city() throws Exception {
		return "ajax/city";
	}

	@RequestMapping(value = "/city/sidoList.do", method = RequestMethod.POST)
	public void sidoList(HttpServletResponse resp) throws Exception {
		List<String> list = service.listSido();
		JSONObject jso = new JSONObject(); // JASON 객체생성
		jso.put("data", list); // jason은 map구조(키,값), data라는 key로 list데이터를 주입했다.

		resp.setContentType("text/html;charset=utf-8");
		PrintWriter out = resp.getWriter();
		out.print(jso.toString()); // out.print 내용을 ajax의 dataType이 jason에게 데이터 쏴줌
	}

	@RequestMapping(value = "/city/cityList.do", method = RequestMethod.POST, produces="text/plain;charset=UTF-8")
	@ResponseBody
	public String cityList(HttpServletResponse resp, @RequestParam("snum")String city) throws Exception {
		resp.setContentType("text/html; charset=UTF-8");
		List<String> list = service.listCity(city);
		JSONObject jso = new JSONObject();
		jso.put("data1", list);
		return jso.toString();
		
	}
	
}


[dispatcher-servlet.xml]


<mvc:annotation-driven>
		<mvc:message-converters>
			<!-- @ResponseBody로 String 처리할때 한글처리 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
</mvc:annotation-driven>


<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />
		<property name="username" value="계정" />
		<property name="password" value="계정비번" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:sql/*.xml" />
	</bean>


	<bean id="dao" class="Ajax.Contorller.CityDAO">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>





[ajax/city.jsp]
<%@ page contentType="text/html; charset=UTF-8"%>
<%@ page trimDirectiveWhitespaces="true" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%
    String cp = request.getContextPath(); //첫번째 경로를 가져온다
request.setCharacterEncoding("UTF-8");
%>

<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
<script src="https://code.jquery.com/jquery-3.1.0.min.js"></script>

<script>
$(function(){
	// 시도테이블의 리스트 가져오기
	var url="<%=cp%>/city/sidoList.do";
	var params="dumi="+new Date();
	
	$.ajax({
		type:"post"		// 포스트방식
		,url:url		// url 주소
		,data:params	//  요청에 전달되는 프로퍼티를 가진 객체
		,dataType:"json"
		,success:function(args){	//응답이 성공 상태 코드를 반환하면 호출되는 함수
			 for(var idx=0; idx<args.data.length; idx++) {
				 $("#sido").append("<option value='"+args.data[idx]+"'>"+args.data[idx]+"</option>");
				 //id가 sido인 요소선택
				 //append로 기존 셀렉터로 선택된 요소 다음에 다음내용이 들어감
				 //<option value='0'>서울</option> 이런식으로 sido의 요소안에 자식으로 들어감
   // args.data[idx] : args 는 function(args)의 인자. data는 controller.java에서 json객체에 넣어준 key(여기서는 list가 값이 된다). [idx]는 list의 몇번쨰 데이터를 가져올지 배열을 나타냄
			 }
		}
	    ,error:function(e) {	// 이곳의 ajax에서 에러가 나면 얼럿창으로 에러 메시지 출력
	    	alert(e.responseText);
	    }
	});
});

function cityList() {
	var snum=$("#sido").val();
	// ID가 sido인 요소의 값을 불러옴
	if(snum=="") {	                // snum에 ""가 선택되어있다면
		$("#city option").each(function() {	//ID가 city이며 option인 요소를 
			$("#city option:eq(1)").remove();	//city option의 1번째를 계속 삭제(0번째만 남기고 모두 지우게 된다) ,  eq : 지정된 index 번째의 엘리먼트 선택
		});


		//$("#city").append("<option value=''>::도시선ㅋ::</option>");	// 위의 반복문으로 모두 삭제되어 있으므로 추가해준다.
		// 위의 명령문은 바로의 위의 엘리먼트가 1이아닌 0이었을 때 사용하면 됨.
		return;
	}
	
	var url="<%=cp%>/city/cityList.do";
	var params="snum="+snum+"&dumi="+new Date();
	
	$.ajax({
		type:"post"
		,url:url	
		,data:params
		,dataType:"json"
		,success:function(args){
			$("#city option").each(function() {	//id가 city인 option요소에 적용할 반복문
				$("#city option:eq(0)").remove();	// city option의 0번째 항목이 없을때까지 0번쨰 항목을 지운다. (기존에 있는거 모두 지운다.)
			});

			 $("#city").append("<option value=''>::도시선택::</option>");	// 도시선택을 붙인다.
			 
			 for(var idx=0; idx<args.data1.length; idx++) {	// 새로 가져온 데이터를 데이터 갯수만큼 반복해서 붙여준다.
				 $("#city").append("<option value='"+args.data1[idx]+"'>"+args.data1[idx]+"</option>");	
// append : 셀렉터로 선택된 (여기서는 id가 city인 ) 자식에게 계속 내용을 붙여준다. 기존 자식이 있다면 그 뒤에 붙여줌.
			 } 
		}
	    ,error:function(e) {
	    	alert(e.responseText);
	    }
	});
}


//확인 버튼을 누르면 실행될 함수
function result() {	
	var sido=$("#sido :selected").text();
	var city=$("#city :selected").text();

	var s=sido+" "+city;
	alert(s);
	
}
</script>

</head>
<body>

<select id="sido" onchange="cityList();">	<!-- onchange로 선택이 될때마다 cityList()실행 -->
  <option value="">::시도선택::</option>
</select>

<select id="city">
  <option value="">::도시선택::</option>
</select>

<input type="button" value=" 확인 " onclick="result();">

</body>
</html>