/jsp/login/login

	[web.xml]
	...
	<context-param>
		<param-name>defaultHtmlEscape</param-name>
		<param-value>false</param-value>
	</context-param>

	<servlet>
		<servlet-name>dispatcherInternal</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcherInternal</servlet-name>
		<url-pattern>/jsp/*</url-pattern>
	</servlet-mapping>

	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	...

[LoginController.java]
	package spring.controller;

	import java.util.ArrayList;
	import java.util.List;

	import org.springframework.stereotype.Controller;
	import org.springframework.validation.BindingResult;
	import org.springframework.web.bind.annotation.ModelAttribute;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestMethod;

	@Controller
	@RequestMapping("/login/login")
	public class LoginController {

		private Authenticator authenticator;

		@ModelAttribute("login")
		public LoginCommand formBacking() {
			return new LoginCommand();
		}

		@RequestMapping(method = RequestMethod.GET)
		public String form() {
			return "loginForm";
		}

		@RequestMapping(method = RequestMethod.POST)
		public String submit(@ModelAttribute("login") LoginCommand loginCommand,
				BindingResult result) {
			new LoginCommandValidator().validate(loginCommand, result);
			if (result.hasErrors()) {
				return "loginForm";
			}
			try {
				authenticator.authenticate(loginCommand.getId(), loginCommand
						.getPassword());
				return "loginSuccess";
			} catch (AuthenticationException ex) {
				result.reject("invalidIdOrPassword", new Object[] { loginCommand
						.getId() }, null);
				return "loginForm";
			}
		}

		@ModelAttribute("loginTypes")
		protected List<String> referenceData() throws Exception {
			List<String> loginTypes = new ArrayList<String>();
			loginTypes.add("일반회원");
			loginTypes.add("기업회원");
			loginTypes.add("헤드헌터회원");
			return loginTypes;
		}

		public void setAuthenticator(Authenticator authenticator) {
			this.authenticator = authenticator;
		}

	}

	[Authenticator.java]
	package spring.controller;

	public interface Authenticator {
		void authenticate(String id, String password);
	}

	[MockAuthenticator.java]
	package spring.controller;

	public class MockAuthenticator implements Authenticator {

		@Override
		public void authenticate(String id, String password) {
			if (!id.equals("test")) {
				throw new AuthenticationException("invalid id "+id);
			}
		}

	}

	[AuthenticationException.java]
	package spring.controller;

	public class AuthenticationException extends RuntimeException {

		private static final long serialVersionUID = 1L;

		public AuthenticationException(String message) {
			super(message);
		}

	}
	
	[LoginCommand.java]
	package spring.controller;

	public class LoginCommand {

		private String id;
		private String password;
		private String loginType;

		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}

		public String getPassword() {
			return password;
		}

		public void setPassword(String password) {
			this.password = password;
		}

		public String getLoginType() {
			return loginType;
		}

		public void setLoginType(String loginType) {
			this.loginType = loginType;
		}

	}

	[LoginCommandValidator.java]
	package spring.controller;

	import org.springframework.validation.Errors;
	import org.springframework.validation.ValidationUtils;
	import org.springframework.validation.Validator;

	public class LoginCommandValidator implements Validator {

		@Override
		public void validate(Object target, Errors errors) {
			ValidationUtils.rejectIfEmptyOrWhitespace(errors, "id", "required");
			ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password",
					"required");
			ValidationUtils.rejectIfEmptyOrWhitespace(errors, "loginType",
					"required");
		}

		@Override
		public boolean supports(Class<?> clazz) {
			return LoginCommand.class.isAssignableFrom(clazz);
		}

	}	

	[/src/messages/validation_en.properties]
	required=required
	required.login.id=login id is required
	required.login.password=login password is requreid
	required.login.loginType=You have to select login type
	invalidIdOrPassword.login=Login id and password do not match. (You provided {0}) 
	duplicate.homepageUrl=Aleady registered URL.
	invalidValue=invalid value
	not_supported=not supported type
	must_select=You have to choose at least one.
	duplicate=Aleady used value.

	[/src/messages/validation.properties]
	required=필수 항목입니다.
	required.login.id=로그인 ID는 필수 항목입니다.
	required.login.password=로그인 암호는 필수 항목입니다.
	required.login.loginType=로그인 타입은 반드시 선택하셔야 합니다.
	invalidIdOrPassword.login=잘못된 ID나 암호를 입력하셨습니다. 입력한 ID는 {0}입니다. 
	duplicate.homepageUrl=이미 등록된 주소입니다.
	invalidValue=올바른 값을 입력하세요.
	not_supported=지원하지 않는 타입니다.
	must_select=1개 이상 선택하셔야 합니다.
	duplicate=중복된 값입니다.

	[/src/messages/label_en.properties]
	label.currentTime=Current Time
	title.currentTime=Time

	login.form.title=Login Form
	login.form.type=Login Type
	login.form.id=ID
	login.form.password=Password
	login.form.submit=Login

	greeting=I'm {0}. {1}

	[/src/messages/label.properties]
	label.currentTime=현재 시간
	title.currentTime=시간

	login.form.title=로그인 입력 폼
	login.form.type=로그인 타입
	login.form.id=로그인 ID
	login.form.password=로그인 암호
	login.form.submit=로그인

	greeting=전  {0} 입니다. "{1}" 

	[/WEB-INF/viewjsp/loginForm.jsp]
	<%@ page contentType="text/html; charset=UTF-8" %>
	<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
	<html>
	<head>
		<title><spring:message code="login.form.title"/></title>
	</head>
	<body>
	<form:form commandName="login">
	<form:errors />
	<p>
		<label for="loginType"><spring:message code="login.form.type" /></label>
		<form:select path="loginType" items="${loginTypes}" />
	</p>
	<p>
		<label for="id"><spring:message code="login.form.id" /></label>
		<form:input id="id" path="id"/>
		<form:errors path="id" />
	</p>
	<p>
		<label for="password"><spring:message code="login.form.password" /></label>
		<form:password id="password" path="password"/>
		<form:errors path="password" />
	</p>
	<p>
		<input type="submit" value="<spring:message code="login.form.submit" />">
	</p>
	</form:form>
	</body>
	</html>

	[/WEB-INF/viewjsp/loginSuccess.jsp]
	<%@ page language="java" contentType="text/html; charset=UTF-8" %>
	<html>
	<head>
		<title>로그인 성공</title>
	</head>
	<body>
	로그인에 성공했습니다.
	</body>
	</html>

	[/WEB-INF/dispatcherInternal-servlet.xml]
	<?xml version="1.0" encoding="UTF-8"?>

	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	       http://www.springframework.org/schema/context
	       http://www.springframework.org/schema/context/spring-context-4.2.xsd">

		<bean class="spring.controller.LoginController">
			<property name="authenticator">
				<bean class="spring.controller.MockAuthenticator" />
			</property>
		</bean>	

		<bean id="viewResolver"
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/WEB-INF/viewjsp/" />
			<property name="suffix" value=".jsp" />
		</bean>

		<bean id="messageSource"
			class="org.springframework.context.support.ResourceBundleMessageSource">
			<property name="basenames">
				<list>
					<value>messages.validation</value>
					<value>messages.label</value>
				</list>
			</property>
		</bean>
		
	</beans>

=================================================================================================================

/jsp/member/regist.do

	[RegistMemberController.java]
	package spring.controller;

	import java.util.ArrayList;
	import java.util.List;

	import org.springframework.stereotype.Controller;
	import org.springframework.ui.Model;
	import org.springframework.validation.BindingResult;
	import org.springframework.web.bind.annotation.ModelAttribute;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestMethod;

	@Controller
	@RequestMapping("/member/regist.do")
	public class RegistMemberController {

		private String formViewName = "registMemberForm";

		@RequestMapping(method = RequestMethod.GET)
		public String form(Model model) {
			referenceData(model);
			return formViewName;
		}

		private void referenceData(Model model) {
			List<Code> jobCodes = new ArrayList<Code>();
			jobCodes.add(new Code("1", "개발자"));
			jobCodes.add(new Code("2", "UI 개발자"));
			jobCodes.add(new Code("3", "웹 디자이너"));
			jobCodes.add(new Code("3", "기획자"));

			String[] favoritesOsNames = { "윈도우XP", "비스타", "윈도우7", "우분투", "맥" };
			String[] tools = { "Eclipse", "IntelliJ", "NetBeans" };

			model.addAttribute("jobCodes", jobCodes);
			model.addAttribute("favoritesOsNames", favoritesOsNames);
			model.addAttribute("tools", tools);
		}

		@ModelAttribute
		protected Object formBackingObject() throws Exception {
			return new MemberInfo();
			// MemberInfo member = new MemberInfo();
			// member.setAddress(new Address());
			// return member;
		}

		@RequestMapping(method = RequestMethod.POST)
		public String submit(@ModelAttribute MemberInfo memberInfo,
				BindingResult result, Model model) {
			new MemberInfoValidator().validate(memberInfo, result);
			checkDuplicateId(memberInfo.getUserId(), result);
			if (result.hasErrors()) {
				referenceData(model);
				return formViewName;
			}
			return "registMember";
		}

		private void checkDuplicateId(String userId, BindingResult errors) {
			if (userId.equals("madvirus")) {
				errors.rejectValue("userId", "duplicate");
			}
		}

	}

	[Code.java]
	package spring.controller;

	public class Code {

		private String code;
		private String label;
		
		public Code() {
		}
		
		public Code(String code, String value) {
			this.code = code;
			this.label = value;
		}

		public String getCode() {
			return code;
		}

		public void setCode(String code) {
			this.code = code;
		}

		public String getLabel() {
			return label;
		}

		public void setLabel(String value) {
			this.label = value;
		}

	}

	[MemberInfo.java]
	package spring.controller;

	public class MemberInfo {

		private String userId;
		private String name;
		private Address address;
		private String[] favorites;
		private String jobCode;
		private String tool;
		private String etc;
		private boolean contractAgreement;

		public String getUserId() {
			return userId;
		}

		public void setUserId(String userId) {
			this.userId = userId;
		}

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

		public Address getAddress() {
			return address;
		}

		public void setAddress(Address address) {
			this.address = address;
		}

		public String[] getFavorites() {
			return favorites;
		}

		public void setFavorites(String[] favorates) {
			this.favorites = favorates;
		}

		public String getJobCode() {
			return jobCode;
		}

		public void setJobCode(String jobCode) {
			this.jobCode = jobCode;
		}

		public String getTool() {
			return tool;
		}

		public void setTool(String tool) {
			this.tool = tool;
		}

		public String getEtc() {
			return etc;
		}

		public void setEtc(String etc) {
			this.etc = etc;
		}

		public boolean isContractAgreement() {
			return contractAgreement;
		}

		public void setContractAgreement(boolean contractAgreement) {
			this.contractAgreement = contractAgreement;
		}

	}

	[Address.java]
	package spring.controller;

	public class Address {

		private String address1;
		private String address2;

		public String getAddress1() {
			return address1;
		}

		public void setAddress1(String address1) {
			this.address1 = address1;
		}

		public String getAddress2() {
			return address2;
		}

		public void setAddress2(String address2) {
			this.address2 = address2;
		}

	}

	[MemberInfoValidator.java]
	package spring.controller;

	import org.springframework.validation.Errors;
	import org.springframework.validation.ValidationUtils;
	import org.springframework.validation.Validator;

	public class MemberInfoValidator implements Validator {

		@Override
		public void validate(Object target, Errors errors) {
			ValidationUtils.rejectIfEmptyOrWhitespace(errors, "userId", "required");
			ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name", "required");
			ValidationUtils.rejectIfEmptyOrWhitespace(errors, "address.address1",
					"required");
			ValidationUtils.rejectIfEmptyOrWhitespace(errors, "address.address2",
					"required");
			ValidationUtils
					.rejectIfEmptyOrWhitespace(errors, "jobCode", "required");
			MemberInfo memberInfo = (MemberInfo) target;
			if (memberInfo.getFavorites() == null
					|| memberInfo.getFavorites().length == 0) {
				errors.rejectValue("favorites", "must_select");
			}
		}

		@Override
		public boolean supports(Class<?> clazz) {
			return MemberInfo.class.isAssignableFrom(clazz);
		}

	}

	[registMemberForm.jsp]
	<%@ page contentType="text/html; charset=UTF-8" %>
	<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
	<html>
	<head>
	<title>회원 등록 폼</title>
	</head>
	<body>
	<form:form commandName="memberInfo">
	<p>
		<form:label path="userId">회원 ID</form:label>
		<form:input path="userId" />
		<form:errors path="userId" />
	</p>
	<p>
		<form:label path="name">이름</form:label>
		<form:input path="name" />
		<form:errors path="name" />
	</p>
	<p>
		<form:label path="address.address1">주소1</form:label>
		<form:input path="address.address1" />
		<form:errors path="address.address1" />
	</p>
	<p>
		<form:label path="address.address2">주소2</form:label>
		<form:input path="address.address2" />
		<form:errors path="address.address2" />
	</p>
	<p>
		<form:label path="jobCode">직업</form:label>
		<form:select path="jobCode" >
			<option value="">--- 선택하세요 ---</option>
			<form:options items="${jobCodes}" itemLabel="label" itemValue="code" />
		</form:select>
		<form:errors path="jobCode" />
	</p>
	<p>
		<form:label path="favorites">선호 OS</form:label>
		<form:checkboxes items="${favoritesOsNames}" path="favorites" />
		<%--
		<form:checkbox path="favorites" value="윈도우XP" label="윈도우XP" />
		<form:checkbox path="favorites" value="비스타" label="비스타" />
		<form:checkbox path="favorites" value="윈도우7" label="윈도우7" />
		<form:checkbox path="favorites" value="우분투" label="우분투" />
		<form:checkbox path="favorites" value="맥" label="맥" />
		--%>
		<form:errors path="favorites" />
	</p>
	<p>
		<form:label path="tool">주로 사용하는 개발툴</form:label>
		<form:radiobuttons items="${tools}" path="tool" />
	</p>
	<p>
		<form:label path="etc">기타</form:label>
		<form:textarea path="etc" cols="20" rows="3"/>
	</p>
	<p>
		<form:checkbox path="contractAgreement" label="약관에 동의합니다."/>
	</p>
	<p>
		<input type="submit" value="회원 등록">
	</p>
	</form:form>
	</body>
	</html>
	
	[registMember.jsp]
	<%@ page contentType="text/html; charset=UTF-8" %>
	<html>
	<head>
	<title>회원 등록</title>
	</head>
	<body>
	회원 등록: ${memberInfo.name}, ${memberInfo.address.address1}, ${memberInfo.address.address2}
	</body>
	</html>

	[dispatcherInternal-servlet.xml]
	...
	<bean class="spring.controller.RegistMemberController" />
	...
=================================================================================================================

/jsp/changeLanguage?lang=ko, /jsp/changeLanguage?lang=en
	[LocaleChangeController.java]
	
	package spring.controller;

	import java.util.Locale;

	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;

	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.servlet.LocaleResolver;

	@Controller
	public class LocaleChangeController {

		private LocaleResolver localeResolver;

		@RequestMapping("/changeLanguage")
		public String change(@RequestParam("lang") String language,
				HttpServletRequest request, HttpServletResponse response) {
			Locale locale = new Locale(language);
			localeResolver.setLocale(request, response, locale);
			return "redirect:/index.jsp";
		}

		public void setLocaleResolver(LocaleResolver localeResolver) {
			this.localeResolver = localeResolver;
		}

	}

	[dispatcherInternal-servlet.xml]
	...
	<bean class="spring.controller.LocaleChangeController">
		<property name="localeResolver" ref="localeResolver" />
	</bean>

	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
	...

	<Example004> /jsp/login/login.do?language=ko, /jsp/login/login.do?language=en
	
	[LocaleChangeController2.java]
	package spring.controller;

	import java.util.Locale;

	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;

	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.servlet.LocaleResolver;
	import org.springframework.web.servlet.support.RequestContextUtils;

	@Controller
	public class LocaleChangeController2 {

		@RequestMapping("/changeLanguage2")
		public String change(@RequestParam("lang") String language,
				HttpServletRequest request, HttpServletResponse response) {
			Locale locale = new Locale(language);
			LocaleResolver localeResolver = RequestContextUtils
					.getLocaleResolver(request);
			localeResolver.setLocale(request, response, locale);
			return "redirect:/index.jsp";
		}

	}

	[dispatcherInternal-servlet.xml]
	...
	<bean class="spring.controller.LocaleChangeController2" />	
	...
	


	<bean id="localeChangeInterceptor"
		class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
		p:paramName="language" />
	...
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
				<ref bean="localeChangeInterceptor" />
			</list>
		</property>
	</bean>
	...